# Production rules ###############################################################
# - Used as a design aid only, not strictly valid EBNF :)
# - Terminal symbols (ALL_CAPS) are expressed as regular expressions in tokens.py
##################################################################################

root = KEYWORD_START_UML [LABEL] NEWLINE declarations KEYWORD_END_UML ;

declarations = {declaration NEWLINE}+ ;

declaration = state_declaration
            | state_alias_declaration
            | state_label_declaration
            | transition_declaration
            | single_line_anchored_note
            | multi_line_anchored_note
            | floating_note_declaration
            | single_line_comment
            | multi_line_comment
            ;

state_declaration = KEYWORD_STATE NAME [STEREOTYPE] (COLON state_label | OPEN_CURLY_BRACKET NEWLINE declarations CLOSE_CURLY_BRACKET) ;

state_alias_declaration = KEYWORD_STATE QUOTATION LABEL QUOTATION KEYWORD_AS NAME [STEREOTYPE] [COLON state_label] ;

state_label_declaration = NAME COLON state_label ;

transition_declaration = (NAME | INITIAL_FINAL_STATE) ARROW (NAME | INITIAL_FINAL_STATE) [STEREOTYPE] [COLON transition_label] ;

single_line_anchored_note = KEYWORD_NOTE (KEYWORD_LEFT_OF | KEYWORD_RIGHT_OF) NAME COLON LABEL ;

multi_line_anchored_note KEYWORD_NOTE (KEYWORD_LEFT_OF | KEYWORD_RIGHT_OF) NAME NEWLINE {LABEL NEWLINE}+ KEYWORD_END KEYWORD_NOTE ;

floating_note_declaration = KEYWORD_NOTE QUOTATION LABEL QUOTATION KEYWORD_AS NAME ;

single_line_comment = APOSTROPHE LABEL ;

multi_line_comment = START_BLOCK_COMMENT NEWLINE {LABEL NEWLINE}+ END_BLOCK_COMMENT ;

state_label = entry_action
            | exit_action
            | LABEL
            ;

entry_action = KEYWORD_ENTRY FORWARD_SLASH BEHAVIOR ;

exit_action = KEYWORD_EXIT FORWARD_SLASH BEHAVIOR ;

transition_label = [TRIGGER] [OPEN_SQ_BRACKET GUARD CLOSE_SQ_BRACKET] [FORWARD_SLASH BEHAVIOR] | LABEL ;